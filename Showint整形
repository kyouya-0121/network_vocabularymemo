Add-Type -AssemblyName System.Windows.Forms

# フォルダ選択ダイアログ
$folderDialog = New-Object System.Windows.Forms.FolderBrowserDialog
$folderDialog.Description = "Cisco show int status テキストファイルのあるフォルダを選択してください"
$folderDialog.ShowNewFolderButton = $false

$result = $folderDialog.ShowDialog()
if ($result -ne [System.Windows.Forms.DialogResult]::OK) {
    Write-Output "フォルダが選択されませんでした。処理を終了します。"
    exit
}

$targetDir = $folderDialog.SelectedPath
Write-Output "選択フォルダ: $targetDir"

# ここから既存の CSV 化処理
$removeInnerSpaces = $true  # 内部空白も削除する場合は true

Get-ChildItem -Path $targetDir -Filter *.txt -File | ForEach-Object {
    $filePath = $_.FullName
    $outFile  = Join-Path $targetDir "$($_.BaseName)_整形.csv"

    $lines = Get-Content $filePath

    # Port 行を探してヘッダ行をスキップ
    $startIndex = ($lines | Select-String "^Port").LineNumber[0]
    if ($null -eq $startIndex) { return }
    $dataLines = $lines[($startIndex)..($lines.Length - 1)]

    # exit 行以降を削除
    $exitIndex = ($dataLines | Select-String "exit").LineNumber[0]
    if ($null -ne $exitIndex) {
        $dataLines = $dataLines[0..($exitIndex - 2)]
    }

    $resultArray = @()
    foreach ($line in $dataLines) {
        if ($line -match "^\s*$") { continue }

        $len = $line.Length
        $col1 = if ($len -ge 1) { $line.Substring(0, [Math]::Min(13, $len)) } else { '' }
        $col2 = if ($len -ge 14) { $line.Substring(13, [Math]::Min(18, $len - 13)) } else { '' }
        $col3 = if ($len -ge 32) { $line.Substring(31, [Math]::Min(14, $len - 31)) } else { '' }

        if ($removeInnerSpaces) {
            $col1 = [regex]::Replace($col1, '\s+', '').Trim()
            $col2 = [regex]::Replace($col2, '\s+', '').Trim()
            $col3 = [regex]::Replace($col3, '\s+', '').Trim()
        } else {
            $col1 = $col1.Trim()
            $col2 = $col2.Trim()
            $col3 = $col3.Trim()
        }

        $resultArray += [PSCustomObject]@{
            Column1 = $col1
            Column2 = $col2
            Column3 = $col3
        }
    }

    if ($resultArray.Count -eq 0) {
        Write-Warning "変換対象データが見つかりませんでした: $filePath"
        continue
    }

    $resultArray | Export-Csv -Path $outFile -NoTypeInformation -Encoding UTF8
    Write-Output "出力しました: $outFile"
}
